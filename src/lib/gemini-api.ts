// API direta do Google Gemini 2.0 Flash usando fetch
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

export interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
    finishReason: string;
    safetyRatings: Array<any>;
  }>;
  usageMetadata: {
    promptTokenCount: number;
    candidatesTokenCount: number;
    totalTokenCount: number;
  };
}

export async function callGeminiAPI(prompt: string): Promise<{ success: boolean; text: string; error?: string }> {
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  
  if (!apiKey) {
    return {
      success: false,
      text: '',
      error: 'API Key do Gemini n√£o configurada. Adicione NEXT_PUBLIC_GEMINI_API_KEY no .env.local'
    };
  }

  try {
    const response = await fetch(GEMINI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-goog-api-key': apiKey,
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topP: 0.8,
          topK: 40,
          maxOutputTokens: 1024,
        }
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      
      if (response.status === 403) {
        return {
          success: false,
          text: '',
          error: 'API Key inv√°lida ou sem permiss√£o. Verifique sua chave do Gemini.'
        };
      }
      
      return {
        success: false,
        text: '',
        error: `Erro na API: ${response.status} - ${errorText}`
      };
    }

    const data: GeminiResponse = await response.json();
    
    if (data.candidates && data.candidates.length > 0) {
      const text = data.candidates[0].content.parts[0].text;
      return {
        success: true,
        text: text,
      };
    } else {
      return {
        success: false,
        text: '',
        error: 'Resposta vazia da API do Gemini'
      };
    }

  } catch {
    return {
      success: false,
      text: '',
      error: 'Erro de conex√£o com a API do Gemini'
    };
  }
}

// Fun√ß√£o para fazer perguntas jur√≠dicas com contexto especializado
export async function askLegalAI(question: string, context?: string): Promise<{ success: boolean; text: string; error?: string }> {
  const systemPrompt = `
Voc√™ √© o MindLegal AI, um assistente especializado em Direito brasileiro para concursos p√∫blicos.

ESPECIALIZA√á√ÉO:
- Direito brasileiro (todas as √°reas)
- Prepara√ß√£o para concursos p√∫blicos
- Jurisprud√™ncia dos tribunais superiores
- Legisla√ß√£o atualizada

DISCIPLINAS:
1. Direito Constitucional
2. Direito Administrativo  
3. Direito Civil
4. Direito Penal
5. Direito Processual Civil
6. Direito Processual Penal
7. Direito Trabalhista
8. Direito Processual do Trabalho
9. Direito Tribut√°rio
10. Direito Empresarial
11. Direito Previdenci√°rio
12. Direito Ambiental

INSTRU√á√ïES:
- Seja did√°tico e claro
- Use exemplos pr√°ticos
- Cite legisla√ß√£o quando relevante
- Adapte ao n√≠vel do estudante
- Seja motivador e encorajador
- Mantenha foco em concursos p√∫blicos

IMPORTANTE:
- Apenas para fins educativos
- N√£o substitui consultoria jur√≠dica
- Sempre recomende consulta a fontes oficiais

CONTEXTO: ${context || 'Estudo geral de Direito'}

PERGUNTA: ${question}

RESPOSTA:`;

  return await callGeminiAPI(systemPrompt);
}

// Fun√ß√£o espec√≠fica para gerar cronogramas de estudo
export async function generateLegalStudyPlan(params: {
  availableHours: number;
  targetExam: string;
  weakAreas: string[];
  studyMethod: string;
  timeFrame: string;
}): Promise<{ success: boolean; text: string; error?: string }> {
  
  const prompt = `
Como MindLegal AI, crie um cronograma detalhado de estudos jur√≠dicos:

DADOS DO ESTUDANTE:
- Horas dispon√≠veis: ${params.availableHours}h por semana
- Concurso alvo: ${params.targetExam}
- √Åreas de dificuldade: ${params.weakAreas.join(', ')}
- M√©todo preferido: ${params.studyMethod}
- Prazo: ${params.timeFrame}

DISCIPLINAS OBRIGAT√ìRIAS:
1. Direito Constitucional
2. Direito Administrativo
3. Direito Civil
4. Direito Penal
5. Direito Processual Civil
6. Direito Processual Penal
7. Direito Trabalhista
8. Direito Processual do Trabalho
9. Direito Tribut√°rio
10. Direito Empresarial
11. Direito Previdenci√°rio
12. Direito Ambiental

CRIE:
1. Cronograma semanal detalhado
2. Distribui√ß√£o de horas por mat√©ria
3. Sequ√™ncia l√≥gica de estudos
4. Momentos de revis√£o
5. Simulados peri√≥dicos
6. Dicas espec√≠ficas para o concurso

Seja espec√≠fico e pr√°tico!
`;

  return await callGeminiAPI(prompt);
}

// Fun√ß√£o para explicar conceitos jur√≠dicos
export async function explainLegalConcept(concept: string, subject: string, level: 'b√°sico' | 'intermedi√°rio' | 'avan√ßado' = 'intermedi√°rio'): Promise<{ success: boolean; text: string; error?: string }> {
  
  const prompt = `
Como MindLegal AI, explique de forma did√°tica:

CONCEITO: "${concept}"
DISCIPLINA: ${subject}
N√çVEL: ${level}

ESTRUTURA DA EXPLICA√á√ÉO:
1. üìñ DEFINI√á√ÉO CLARA
   - O que √© o conceito
   - Palavras-chave principais

2. ‚öñÔ∏è BASE LEGAL
   - Legisla√ß√£o pertinente
   - Artigos espec√≠ficos

3. üí° EXEMPLO PR√ÅTICO
   - Situa√ß√£o real de aplica√ß√£o
   - Como aparece na pr√°tica

4. üß† DICA DE MEMORIZA√á√ÉO
   - T√©cnica para decorar
   - Associa√ß√£o ou mnem√¥nico

5. üìù QUEST√ÉO T√çPICA
   - Como √© cobrado em concursos
   - Exemplo de quest√£o

Seja claro, did√°tico e focado em concursos p√∫blicos!
`;

  return await callGeminiAPI(prompt);
}

// Fun√ß√£o para gerar quest√µes de concurso
export async function generateLegalQuestions(
  subject: string, 
  difficulty: 'b√°sico' | 'intermedi√°rio' | 'avan√ßado', 
  examBoard: 'CESPE' | 'FCC' | 'FGV' | 'VUNESP' | 'Qualquer' = 'Qualquer',
  quantity: number = 5
): Promise<{ success: boolean; text: string; error?: string }> {
  
  const prompt = `
Como MindLegal AI, crie ${quantity} quest√µes de m√∫ltipla escolha:

ESPECIFICA√á√ïES:
- Disciplina: ${subject}
- N√≠vel: ${difficulty}
- Banca: ${examBoard}
- Quantidade: ${quantity} quest√µes

FORMATO PARA CADA QUEST√ÉO:
---
**QUEST√ÉO X**
[Enunciado claro e objetivo]

a) [Alternativa A]
b) [Alternativa B]
c) [Alternativa C]
d) [Alternativa D]
e) [Alternativa E]

**GABARITO:** [Letra correta]

**EXPLICA√á√ÉO:**
[Justificativa da resposta correta]

**BASE LEGAL:**
[Artigo ou dispositivo legal]
---

CARACTER√çSTICAS:
- Estilo da banca ${examBoard}
- N√≠vel de dificuldade ${difficulty}
- Baseado em jurisprud√™ncia recente
- Foco em concursos p√∫blicos atuais

Crie quest√µes pr√°ticas e bem fundamentadas!
`;

  return await callGeminiAPI(prompt);
}
